# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html
    """
    response.flash = "Welcome to the Neural Archive!"
    entries = db().select(db.entry.ALL, orderby=db.entry.title)
    return dict(entries=entries)

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)

#@services.jsonrpc
def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())

def browse():
    if request.function == 'first':
        response.flash = "Entry created!"
    entries = db().select(db.entry.ALL, orderby=db.entry.title)
    return dict(entries=entries)

def add():
    form = crud.create(db.entry,
                       next=URL('show',args=request.args(0)),
                       message=T('New entry created!'))
    return dict(form=form)
    
def show():
    entry = db(db.entry.id==request.args(0)).select().first()
    #db.comment.image_id.default = image.id
    #form = SQLFORM(db.comment)
    #if form.process().accepted:
    #    response.flash = 'your comment is posted'
    #comments = db(db.comment.image_id==image.id).select()
    #return dict(image=image, comments=comments, form=form)
    return dict(entry=entry)
    
def show_html():
    entry = db(db.entry.id==request.args(0)).select().first()
    return dict(entry=entry)
    
def edit():
     this_entry = db.entry(request.args(0)) or redirect(URL('index'))
     form = crud.update(db.entry, this_entry,
                        next=URL('show',args=request.args))
     return dict(form=form)

def search():
     form, results = crud.search(db.entry,
                       #queries = ['equals', 'not equal', 'contains'],
                       #query_labels={'equals':'Equals',
                       #              'not equal':'Not equal'},
                       fields = ['title','pub_index'],
                       field_labels = {'title':'Title','pub_index':'Index'},
                       zero='Please choose',
                       #query = (db.test.id > 0)&(db.test.id != 3),
                       )

from random import randint
def random():
     random_entry = db().select(db.entry.ALL,orderby='<random>',limitby=(0,1))[0]
     return redirect(URL('show',args=(random_entry.id)))

def random_html():
     random_entry = db().select(db.entry.ALL,orderby='<random>',limitby=(0,1))[0]
     return redirect(URL('show_html',args=(random_entry.id)))
